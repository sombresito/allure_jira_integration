plugins {
    id 'java'
    id 'jacoco'
    id 'idea'
    id 'pmd'
    id 'checkstyle'

    id 'com.github.spotbugs' version '4.6.0'
    id 'io.freefair.lombok' version '5.3.3.3'
    id 'com.github.ben-manes.versions' version '0.42.0'

    // https://docs.spring.io/spring-boot/docs/current/reference/html/dependency-versions.html
    id 'org.springframework.boot' version '2.7.1'
    id 'io.spring.dependency-management' version '1.0.12.RELEASE'
    id "com.vaadin" version "23.1.3"
    id "com.github.node-gradle.node" version "7.0.2"

}

apply from: './gradle/dependencies.gradle'
apply from: './gradle/checking.gradle'
apply from: './gradle/testing.gradle'

dependencies {
    implementation group: 'com.vaadin', name: 'vaadin', version: '23.1.3'
    implementation 'org.springframework.ldap:spring-ldap-core:2.3.4.RELEASE'
    implementation 'org.springframework.security:spring-security-ldap:5.7.2'
    implementation 'jakarta.mail:jakarta.mail-api:2.0.1'
    implementation 'com.sun.mail:jakarta.mail:2.0.1'
    implementation 'jakarta.activation:jakarta.activation-api:2.0.1'
    implementation 'com.sun.activation:jakarta.activation:2.0.1'
    implementation 'org.jasypt:jasypt:1.9.3'
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.4'
    implementation 'net.datafaker:datafaker:1.8.0'
    implementation 'org.aeonbits.owner:owner:1.0.12'
    implementation 'com.oracle.database.jdbc:ojdbc8:19.8.0.0'
    implementation 'com.vaadin:vaadin-spring-boot-starter'
    implementation 'com.github.docker-java:docker-java:3.2.12'
    implementation 'com.microsoft.graph:microsoft-graph:5.75.0'
    implementation 'com.azure:azure-identity:1.8.1'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv'
    implementation 'com.github.docker-java:docker-java:3.2.12'
    implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'

}


generateLombokConfig.enabled = false

group = theGroup
archivesBaseName = theArchivesBaseName
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}
compileJava {
    options.encoding = 'UTF-8'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}
wrapper {
    distributionType = Wrapper.DistributionType.ALL
    gradleVersion = '8.5'
//    doLast {
//        delete "$projectDir/gradlew.bat", "$projectDir/gradlew"
//    }
}
vaadin {
    nodeVersion = 'v16.15.0'
    pnpmEnable = false
    productionMode = true
}
classes {
    doLast {
        def resourcesDir = sourceSets.main.output.resourcesDir as File
        def releaseVersion = System.getenv("RELEASE_VERSION") as String
        if (releaseVersion) {
            new File(resourcesDir, "version.info").text = releaseVersion
        }
    }
}



node {
    download       = true
    version        = '20.9.0'
    nodeProjectDir = file("${projectDir}/allure-frontend")
}



tasks.register('frontendBuild', com.github.gradle.node.npm.task.NpmTask) {
    dependsOn tasks.named('npmInstall')
    workingDir = file("${projectDir}/allure-frontend")
    // ? ????  ../src/main/resources/static
    args = ['run', 'build', '--', '--outDir',
            '../src/main/resources/static/ui/']  // <-- ???????? /react
}


processResources.dependsOn 'frontendBuild'


tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}